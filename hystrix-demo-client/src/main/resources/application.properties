server.port=9090


#######################
## HYSTRIX ############
#######################

# more info: https://github.com/Netflix/Hystrix/wiki/configuration

# Default properties

# This property indicates which isolation strategy HystrixCommand.run() executes with, one of the following two choices:
# - THREAD: it executes on a separate thread and concurrent requests are limited by the number of threads in the thread-pool
# - SEMAPHORE: it executes on the calling thread and concurrent requests are limited by the semaphore count
hystrix.command.default.execution.isolation.strategy=THREAD

# This property indicates whether the HystrixCommand.run() execution should have a timeout.
hystrix.command.default.execution.timeout.enabled=true

# This property sets the time in milliseconds after which the caller will observe a timeout and walk away from the command execution. 
# Hystrix marks the HystrixCommand as a TIMEOUT, and performs fallback logic. 
# Note that there is configuration for turning off timeouts per-command, if that is desired (see command.timeout.enabled).
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=2000

# This property indicates whether the HystrixCommand.run() execution should be interrupted when a timeout occurs.
hystrix.command.default.execution.isolation.thread.interruptOnTimeout=true

# This property indicates whether the HystrixCommand.run() execution should be interrupted when a cancellation occurs.
hystrix.command.default.execution.isolation.thread.interruptOnCancel=false

# This property sets the maximum number of requests allowed to a HystrixCommand.run() method when you are using ExecutionIsolationStrategy.SEMAPHORE.
# If this maximum concurrent limit is hit then subsequent requests will be rejected.
# The logic that you use when you size a semaphore is basically the same as when you choose how many threads to add to a thread-pool, 
# but the overhead for a semaphore is far smaller and typically the executions are far faster (sub-millisecond), otherwise you would be using threads.
#   For example, 5000rps on a single instance for in-memory lookups with metrics being gathered has been seen to work with a semaphore of only 2.
#   The isolation principle is still the same so the semaphore should still be a small percentage of the overall container (i.e. Tomcat) thread pool, 
#   not all of or most of it, otherwise it provides no protection.
hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests=10

# The following properties control how HystrixCommand.getFallback() executes. 
# These properties apply to both ExecutionIsolationStrategy.THREAD and ExecutionIsolationStrategy.SEMAPHORE
# This property sets the maximum number of requests a HystrixCommand.getFallback() method is allowed to make from the calling thread.
# If the maximum concurrent limit is hit then subsequent requests will be rejected and an exception thrown since no fallback could be retrieved.
hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests=10

# This property determines whether a call to HystrixCommand.getFallback() will be attempted when failure or rejection occurs.
hystrix.command.default.fallback.enabled=true

# This property determines whether a circuit breaker will be used to track health and to short-circuit requests if it trips.
hystrix.command.default.circuitBreaker.enabled=true

# This property sets the minimum number of requests in a rolling window that will trip the circuit.
# For example, if the value is 20, then if only 19 requests are received in the rolling window (say a window of 10 seconds) 
# the circuit will not trip open even if all 19 failed.
hystrix.command.default.circuitBreaker.requestVolumeThreshold=20


# Instance properties (overrides default's)
#hystrix.command.{HystrixCommandKey}.*=xx
#hystrix.command.getUserCommandWithFallback.execution.isolation.thread.timeoutInMilliseconds=3000


###############################################

spring.output.ansi.enabled = ALWAYS
logging.pattern.console= %d{HH:mm:ss} %-5level %c{36}#%M:%L %m%n